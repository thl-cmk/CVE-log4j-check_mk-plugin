#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# License: GNU General Public License v2
#
# Author: thl-cmk[at]outlook[dot]com
# URL   : https://thl-cmk.hopto.org
# Date  : 2021-12-19
#
# WATO file for the cve_2021_44228 plugins (bakery and check)
#
# 2021-12.19: added WATO options scan_logback, log4j_1, no_symlink, scan_zip, silent
# 2021-12-23: reworked structure for windows all-drives/drives/search path
# 2021-12-27: added files_skipped and errors, files/directories scanned lower levels
# 2021-12-30: added bulk config for search path end exclude path
# 2022-01-02: added options for syslog facility, rfc5424 syslog message format, append reporting to file
#             added exclude files (buk)
# 2022-01-05: changed display names to "CVE scanner for log4j (CVE-2021-44228-log4j)"
# 2022-01-06: made "Silent output" enabled by default
# 2022-01-07: changed "Cache time" into "Scan interval!"
#

from cmk.gui.i18n import _
from cmk.gui.valuespec import (
    Dictionary,
    Integer,
    Tuple,
    Float,
    CascadingDropdown,
    FixedValue,
    TextInput,
    TextUnicode,
    ListOfStrings,
    ListChoice,
    DropdownChoice,
    TextAreaUnicode,
    MonitoringState,
    # FileUpload,
    # UploadOrPasteTextFile,
)

from cmk.gui.plugins.wato import (
    rulespec_registry,
    RulespecGroupCheckParametersOperatingSystem,
    RulespecGroupCheckParametersDiscovery,
    CheckParameterRulespecWithItem,
    HostRulespec,
)

from cmk.gui.mkeventd import (
    syslog_facilities,
)

from cmk.gui.cee.plugins.wato.agent_bakery.rulespecs.utils import (
    RulespecGroupMonitoringAgentsAgentPlugins,
)

bakery_plugin_version = '20220102.v0.0.4'

# #########################################################################################################
#
# Levels for return values check plugin cve_2021_44228_log4j.py
#
# #########################################################################################################

_items_on_info = [
    ('files_vulnerable', 'Files vulnerable'),
    ('files_potential_vulnerable', 'Files potentially vulnerable'),
    ('files_mitigated', 'Files mitigated'),
    ('files_scanned', 'Files scanned'),
    ('files_skipped', 'Files skipped'),
    ('directories_scanned', 'Directories scanned'),
    ('run_time', 'Run time'),
    ('last_run', 'Last run'),
    ('errors', 'Errors'),
    ('script_version', 'Script version'),
    ('bakery_version', 'Bakery version'),
    ('scanner_version', 'logresso scanner version'),
    ('scan_options', 'Scan options'),
]


def _valuespec_cve_2021_44228_log4j():
    return Dictionary(
        elements=[
            ('files_vulnerable',
             Tuple(
                 title=_('Files vulnerable'),
                 help=_('Upper levels for # of vulnerable files found.'),
                 elements=[
                     Integer(title=_('Warning at'), minvalue=0, unit=_('Files'), default_value=1),
                     Integer(title=_('Critical at'), minvalue=0, unit=_('Files'), default_value=1),
                 ])),
            ('files_potential_vulnerable',
             Tuple(
                 title=_('Files potentially vulnerable'),
                 help=_('Upper levels for # of potentially vulnerable files found.'),
                 elements=[
                     Integer(title=_('Warning at'), minvalue=0, unit=_('Files'), default_value=1),
                     Integer(title=_('Critical at'), minvalue=0, unit=_('Files'), default_value=1),
                 ])),
            ('files_mitigated',
             Tuple(
                 title=_('Files mitigated'),
                 help=_('Upper levels for # of mitigated files found.'),
                 elements=[
                     Integer(title=_('Warning at'), minvalue=0, unit=_('Files'), default_value=1),
                     Integer(title=_('Critical at'), minvalue=0, unit=_('Files'), ),
                 ])),
            ('files_scanned',
             Dictionary(
                 title=_('Files scanned'),
                 elements=[
                     ('upper',
                      Tuple(
                          title=_('Upper limits'),
                          help=_('Upper levels for # of files scanned'),
                          elements=[
                              Integer(title=_('Warning at'), minvalue=0, unit=_('Files'), ),
                              Integer(title=_('Critical at'), minvalue=0, unit=_('Files'), ),
                          ])),

                     ('lower',
                      Tuple(
                          title=_('Lower limits'),
                          help=_('Lower levels for # of files scanned.'),
                          elements=[
                              Integer(title=_('Warning below'), minvalue=0, unit=_('Files'), ),
                              Integer(title=_('Critical below'), minvalue=0, unit=_('Files'), ),
                          ])),

                 ])),
            ('directories_scanned',
             Dictionary(
                 title=_('Directories scanned'),
                 elements=[
                     ('upper',
                      Tuple(
                          title=_('Upper limits'),
                          help=_('Upper levels for # of directories scanned.'),
                          elements=[
                              Integer(title=_('Warning at'), minvalue=0, unit=_('Directories'), ),
                              Integer(title=_('Critical at'), minvalue=0, unit=_('Directories'), ),
                          ])),
                     ('lower',
                      Tuple(
                          title=_('Lower limits'),
                          help=_('Lower levels for # of directories scanned.'),
                          elements=[
                              Integer(title=_('Warning below'), minvalue=0, unit=_('Directories'), ),
                              Integer(title=_('Critical below'), minvalue=0, unit=_('Directories'), ),
                          ])),
                 ])),
            ('run_time',
             Tuple(
                 title=_('Run time'),
                 help=_('Upper levels for time needed to run the scanner.'),
                 elements=[
                     Float(title=_('Warning at'), minvalue=0, unit=_('s'), ),
                     Float(title=_('Critical at'), minvalue=0, unit=_('s'), ),
                 ])),
            ('files_skipped',
             Tuple(
                 title=_('Files skipped'),
                 help=_('Upper levels for # of files skipped (not scanned).'),
                 elements=[
                     Integer(title=_('Warning at'), minvalue=0, unit=_('Files'), default_value=1),
                     Integer(title=_('Critical at'), minvalue=0, unit=_('Files'), ),
                 ])),
            ('errors',
             Tuple(
                 title=_('Errors'),
                 help=_('Upper levels for # of errors from the scanner or the agent plugin.'),
                 elements=[
                     Integer(title=_('Warning at'), minvalue=0, unit=_('Errors'), ),
                     Integer(title=_('Critical at'), minvalue=0, unit=_('Errors'), default_value=1),
                 ])),
            ('items_on_info',
             ListChoice(
                 title=_('Items to show up in the check info'),
                 help=_('Selected items will show up in the service info. '
                        'Default is "Files vulnerable" and "Files potentially vulnerable"'),
                 choices=_items_on_info,
                 default_value=[
                     'files_vulnerable',
                     'files_potential_vulnerable',
                 ],
             )),
            ('state_missing_output',
             MonitoringState(
                 default_value=1,
                 title=_('State on missing agent output'),
                 help=_('Monitoring state if an item is missing from agent output')
             )),
            ('ignore_missing_output',
             ListChoice(
                 title=_('Ignore missing output form agent output'),
                 help=_('Selected items will not generate a warning if the are missing from the agent output'),
                 choices=_items_on_info,
                 default_value=[
                     'files_skipped',
                     'errors',
                     'script_version',
                     'bakery_version',
                 ],
             )),
        ])


rulespec_registry.register(
    CheckParameterRulespecWithItem(
        check_group_name='cve_2021_44228_log4j',
        group=RulespecGroupCheckParametersOperatingSystem,
        parameter_valuespec=_valuespec_cve_2021_44228_log4j,
        title=lambda: _('CVE scanner for log4j (CVE-2021-44228-log4j)'),
        match_type='dict',
        # item_spec=lambda: TextUnicode(title=_('Service name'), ),
    ))


# #########################################################################################################
#
# Discovery rule set for the check plugin cve_2021_44228_log4j.py
#
# #########################################################################################################


# def _valuespec_discovery_cve_2021_44228_log4j():
#     return Dictionary(
#             title=_('CVE scanner for log4j (CVE-2021-44228-log4j)'),
#             elements=[
#                 ('service_name',
#                  TextUnicode(
#                      title=_('Service name'),
#                      help=_('Name for the discovered service. Must be unique.'),
#                      allow_empty=False,
#                      default_value='CVE-2021-44228-log4j',
#                  )),
#             ],
#         )
#
#
# rulespec_registry.register(
#     HostRulespec(
#         group=RulespecGroupCheckParametersDiscovery,
#         match_type='dict',
#         name='discovery_cve_2021_44228_log4j',
#         valuespec=_valuespec_discovery_cve_2021_44228_log4j,
#     ))


# #########################################################################################################

#
# Config for agent plugin cve_2021_44228_log4j.(sh|ps1)
#
# #########################################################################################################


_base_options_config_fix_files = (
    'fix_files',
    Dictionary(
        title=_('Fix files and backup'),
        elements=[
            ('force_fix',
             FixedValue(
                 '--force-fix',
                 title=_('Fix files. (Use at your own risk!)'),
                 totext=_('Files will be fixed'),
                 help=_('Do not prompt confirmation. Don\'t use this option unless you know what you are doing.')
             )),
            ('backup_dir',
             TextUnicode(
                 title=_('Backup directory (must exist)'),
                 help=_(
                     'Specify backup file path. Remember the directory must exist '
                     'and the scanner must be able to write there!'
                 ),
                 allow_empty=False,
             )),
            ('not_exclude_backup',
             FixedValue(
                 True,
                 title=_('Don\'t Exclude backup path'),
                 totext=_('Don\'t Exclude backup path from scanning'),
                 help=_('Backup path will be not excluded from scanning.'),
             )),
        ],
        required_keys=['backup_dir'],
    ),

)

_base_options_config_interval = (
    'interval',
    Integer(
        title=_('Scan interval (min 600s)'),
        minvalue=600,
        unit=_('s'),
        default_value=86400,
        help=_('This is the interval witch the scanner runs. Default is 86400s (one day). Minimum is 600s (10min)'),
    ),

)

_base_options_config_timeout = (
    'timeout',
    Integer(
        title=_('Scanner timeout (min 60s)'),
        # minvalue=60,
        unit=_('s'),
        default_value=300,
        help=_('This is the maximum run time for the scanner. Default is 300s (5min). Minimum is 60s (1min)'),
    ),
)

_base_options_config_scan_logback = (
    'scan_logback',
    FixedValue(
        '--scan-logback',
        title=_('Scan for logback (CVE-2021-42550)'),
        totext=_('Scan for logback (CVE-2021-42550) enabled'),
        help=_('Enables scanning for logback CVE-2021-42550.'),
    )
)

_base_options_config_log4j_1 = (
    'log4j_1',
    FixedValue(
        '--scan-log4j1',
        title=_('Scan for log4j 1 versions (CVE-2021-4104)'),
        totext=_('Scan for log4j 1 versions (CVE-2021-4104) enabled'),
        help=_('Enables scanning for log4j 1 versions (CVE-2021-4104).'),
    )
)

_base_options_config_scan_zip = (
    'scan_zip',
    FixedValue(
        '--scan-zip',
        title=_('Scan zip files (increase timeout)'),
        totext=_('Scanning .zip files enabled'),
        help=_('Scan also .zip extension files. This option may slow down scanning.'),
    )
)

_base_options_config_no_symlink = (
    'no_symlink',
    FixedValue(
        '--no-symlink',
        title=_('Ignore symlinks'),
        totext=_('Ignore symlinks enabled'),
        help=_('Do not detect symlink as vulnerable file.'),
    )
)

_base_options_config_silent = (
    'silent',
    FixedValue(
        '--silent',
        title=_('Silent output'),
        totext=_('Silent output enabled'),
        help=_('Do not print anything until scan is completed. This will '
               'remove some progress messages from the scanner output'),
    )
)

_base_option_config_exclude_fs = (
    'exclude_fs',
    ListOfStrings(
        title=_('Exclude filesystems by type'),
        orientation='horizontal',
        allow_empty=False,
        valuespec=TextInput(allow_empty=False, regex='[a-zA-Z0-9\.]'),
        help=_('Exclude paths by file system type. nfs, nfs3, nfs4, cifs, '
               'tmpfs, devtmpfs, fuse.sshfs and iso9660 is ignored by default.'),
    )
)


_base_option_config_syslog = (
    'syslog',
    Dictionary(
        title=_('Enable syslog reporting'),
        elements=[
            ('syslog_server',
             TextUnicode(
                 title=_('Syslog server'),
                 help=_('IP-Address or hostname of the syslog server to log to.'),
                 allow_empty=False,
             )),
            ('syslog_port',
             Integer(
                 title=_('Syslog server Port'),
                 help=_('Port of the syslog server. Default ist 512.'),
                 default_value=514,
                 minvalue=1,
                 maxvalue=65535
             )),
            ('syslog_level',
             DropdownChoice(
                 title=_('Loglevel'),
                 help=_(
                     'Use "alert" level for SIEM integration. It will report vulnerable/potential vulnerable files.\n'
                     'Use "info" level for BI reporting. It reports also MITIGATED files. This is the default mode.\n'
                     'Use "debug" level for error reporting'),
                 choices=[
                     ('alert', _('Alert')),
                     ('info', _('Info')),
                     ('debug', _('Debug')),
                 ],
                 default_value='info',
             )),
            ('syslog_facility',
             DropdownChoice(
                 title=_('Facility'),
                 help=_('Default value is 16 (local0). Facility value must be in the range of 0 to 23'),
                 choices=syslog_facilities,

                 # from ~/lib/check_mk/gui/mkeventd.py
                 # syslog_facilities: DropdownChoices = [
                 #     (0, "kern"),
                 #     (1, "user"),
                 #     (2, "mail"),
                 #     (3, "daemon"),
                 #     (4, "auth"),
                 #     (5, "syslog"),
                 #     (6, "lpr"),
                 #     (7, "news"),
                 #     (8, "uucp"),
                 #     (9, "cron"),
                 #     (10, "authpriv"),
                 #     (11, "ftp"),
                 #     (12, "(12: unused)"),
                 #     (13, "(13: unused)"),
                 #     (14, "(14: unused)"),
                 #     (15, "(15: unused)"),
                 #     (16, "local0"),
                 #     (17, "local1"),
                 #     (18, "local2"),
                 #     (19, "local3"),
                 #     (20, "local4"),
                 #     (21, "local5"),
                 #     (22, "local6"),
                 #     (23, "local7"),
                 #     (31, "snmptrap"),
                 # ]
                 default_value=16,
             )),
            ('syslog_rfc5424',
             FixedValue(
                 '--rfc5424',
                 title=_('Use RFC5424 syslog format'),
                 totext=_('Formatting of syslog messages as in RFC5424 enabled'),
                 help=_('Without formatting the message as of RFC5424, the message looks like this \"<133>{\"time\": '
                        '\"2022-01-01 19:35:25+0100\", \"hostname\": \"checkmk\", \"path\": '
                        '\"/usr/bin/pycharm/pycharm-community-2021.1.3/lib/log4j.jar\", \"entry\": \"\", \"product\": '
                        '\"Log4j 1\", \"version\": \"1.2.17.2\", \"cve\": \"CVE-2021-4104\", \"status\": '
                        '\"MITIGATED\", \"fixed\": false}\". \nThis will break some syslog implementations becaus of '
                        'the missing/wrong syslog header. For example CMKs event console will show \"{\"time\":\" as '
                        'the Application. With RFC5424 enabled the message is changed like this '
                        '\"<133> 1 2022-01-01T23:20:50.52Z HOSTNAME LOPGRESSO LOG4J2-SCAN DETECT - {your message}\". '
                        'APP-NAME: LOPGRESSO, PROCID: LOG4J2-SCAN, MSGID: DETECT. MSGID can also be ERROR in case of a '
                        'scan error, for example on broken zip or jar files.'
                        ),
             )),
        ],
        required_keys=['syslog_server']
    ),
)

_base_option_config_report = (
    'reporting',
    Dictionary(
        title=_('Enable file reporting'),
        elements=[
            ('report_dir',
             TextUnicode(
                 title=_('Report output directory (must exist)'),
                 help=_('Specify report output directory. If report file is not configured, the scanner will create on '
                        'each run a new file in the format "log4j2_scan_report_yyyyMMdd_HHmmss" with the extension '
                        '"csv" or "json". Remember the scanner must be able to write there!'),
                 allow_empty=False,
             )),
            ('log_path',
             TextUnicode(
                 title=_('Name of the file to report to'),
                 help=_('Specify json log file. If report file exists, log will be appended. The report file will '
                        'be created in the "Report output directory" (see above). Remember the scanner must be able '
                        'to write there!'),
                 allow_empty=False,
             )),
            ('report_format',
             DropdownChoice(
                 title=_('Report format'),
                 help=_(
                     'Generate log4j2_scan_report_yyyyMMdd_HHmmss.csv or '
                     'log4j2_scan_report_yyyyMMdd_HHmmss.json in the report directory.'),
                 choices=[
                     ('--report-csv', _('CSV')),
                     ('--report-json', _('JSON')),
                 ],
                 default_value='--report-csv',
             )),
            ('no_empty_report',
             FixedValue(
                 '--no-empty-report',
                 title=_('Don\'t create empty reports'),
                 totext=_('Don\'t create empty reports'),
                 help=_('Do not generate empty report.'),
             )),
        ],
        required_keys=['report_dir']
    ),
)

_base_options_config_debug = (
    'debug',
    FixedValue(
        '--debug',
        title=_('Debug scanner'),
        totext=_('Debug scanner enabled'),
        help=_('Print exception stacktrace for debugging.'),
    )
)

_base_options_config_trace = (
    'trace',
    FixedValue(
        '--trace',
        title=_('Trace scanner (Use only for troubleshooting!! It produces a lot ou output'),
        totext=_('Trace scanner enabled'),
        help=_('Print all directories and files while scanning.'),
    )
)


_base_option_config_exclude_paths = (
    'exclude_paths',
    CascadingDropdown(
        title=_('Exclude paths'),
        default_value='exclude_paths',
        sorted=False,
        choices=[
            ('exclude_paths',
             _('Exclude paths'),
             ListOfStrings(
                 orientation='horizontal',
                 allow_empty=False,
                 valuespec=TextInput(allow_empty=False, regex='[^|<>&]'),
                 help=_('Exclude specified paths from the scanning'),
             )),
            ('exclude_paths_file',
             _('Exclude paths (bulk)'),
             TextAreaUnicode(
                 help='Specify path list. Paths should be separated by new line. Prepend # for comment.',
                 allow_empty=False,
                 forbidden_chars='|<>&',
                 strip=True,
                 cols=85,
                 rows=5,
                 default_value='# Specify path list. Paths should be separated by new line. Prepend # for comment.\n'
             ))
        ],
    )
)


_base_option_config_exclude_files = (
    ('exclude_file_config',
     TextAreaUnicode(
         title=_('Exclude files (bulk)'),
         help='Specify file list. Files should be separated by new line. Prepend # for comment.',
         allow_empty=False,
         forbidden_chars='|<>&',
         strip=True,
         cols=85,
         rows=5,
         default_value='# Specify file list. Files should be separated by new line. Prepend # for comment.\n'
     ))
)


def _valuespec_agent_config_cve_2021_44228_log4j():
    return CascadingDropdown(
        title=_('CVE scanner for log4j (CVE-2021-44228-log4j)'),
        help=_(
            f'If you activate this option, then the agent plugin <tt>cve_2021_44228_log4j</tt> will be deployed. '
            f'This will scan for files with the CVE-2021-44228-log4j issue. (Plugin version: {bakery_plugin_version})'
        ),
        sorted=False,
        # default_value='linux',
        choices=[
            ('linux',
             _('Deploy Linux CVE-2021-44228-log4j agent plugin'),
             Dictionary(elements=[
                 ('search_in',
                  CascadingDropdown(
                      title=_('Search method'),
                      # default_value='search_paths',
                      sorted=False,
                      choices=[
                          ('search_paths',
                           _('Search paths'),
                           ListOfStrings(
                               orientation='horizontal',
                               allow_empty=False,
                               valuespec=TextInput(allow_empty=False, regex='[^|<>&:]'),
                               help=_('Paths where the scanner searches for vulnerable files'),
                               default_value=['/'],
                           )),
                          ('include_paths_file',
                           _('Search paths (bulk)'),
                           TextAreaUnicode(
                               help='Specify path list. Paths should be separated by new line. Prepend # for comment.',
                               allow_empty=False,
                               forbidden_chars='|<>&:',
                               strip=True,
                               cols=85,
                               rows=5,
                               default_value='# Specify path list. Paths should be separated by new line. '
                                             'Prepend # for comment.\n'
                                             '/\n',
                           ))
                      ],
                  )),
                 _base_options_config_scan_logback,
                 _base_options_config_log4j_1,
                 _base_options_config_scan_zip,
                 _base_options_config_fix_files,
                 _base_option_config_exclude_paths,
                 _base_option_config_exclude_files,
                 _base_option_config_exclude_fs,
                 _base_options_config_no_symlink,
                 _base_option_config_syslog,
                 _base_option_config_report,
                 _base_options_config_silent,
                 _base_options_config_interval,
                 _base_options_config_timeout,
                 _base_options_config_debug,
                 # _base_options_config_trace,  # run takes to long, produces to much output
             ],
                 required_keys=['search_in'],
                 default_keys=['silent'],
             )),
            ('windows',
             _('Deploy Windows CVE-2021-44228-log4j agent plugin'),
             Dictionary(elements=[
                 ('search_in',
                  CascadingDropdown(
                      title=_('Search method'),
                      default_value='all_drives',
                      sorted=False,
                      choices=[
                          ('all_drives', _('All drives')),
                          ('drives_to_scan',
                           _('Drives to scan'),
                           ListOfStrings(
                               orientation='horizontal',
                               allow_empty=False,
                               valuespec=TextInput(size=1, maxlen=1, minlen=1, allow_empty=False, regex='[a-zA-Z]'),
                               help=_('This drives will be scanned, default is "--all-drives"'),
                               default_value=['C'],
                           )),
                          ('search_paths',
                           _('Search paths'),
                           ListOfStrings(
                               orientation='horizontal',
                               allow_empty=False,
                               valuespec=TextInput(allow_empty=False, regex='[^|<>&]'),
                               help=_('Paths where the scanner searches for vulnerable files'),
                               default_value=['C:\\'],
                           )),
                          ('include_paths_file',
                           _('Search paths (bulk)'),
                           TextAreaUnicode(
                               help='Specify path list. Paths should be separated by new line. Prepend # for comment.',
                               allow_empty=False,
                               forbidden_chars='|<>&',
                               strip=True,
                               cols=85,
                               rows=5,
                               default_value='# Specify path list. Paths should be separated by new line. '
                                             'Prepend # for comment.\r\n'
                                             'C:\\\r\n',
                           ))
                      ],
                  )),
                 _base_options_config_scan_logback,
                 _base_options_config_log4j_1,
                 _base_options_config_scan_zip,
                 _base_options_config_fix_files,
                 _base_option_config_exclude_paths,
                 _base_option_config_exclude_files,
                 # _base_option_config_exclude_fs, # filesystem type on windows?
                 # _base_options_config_no_symlink,  # sym links on windows?
                 _base_option_config_syslog,
                 _base_option_config_report,
                 _base_options_config_silent,
                 _base_options_config_interval,
                 _base_options_config_timeout,
                 _base_options_config_debug,
                 # _base_options_config_trace,  # run takes to long, produces to much output
             ],
                 required_keys=['search_in'],
                 default_keys=['silent'],
             )),
            (None, _('Do not deploy the CVE-2021-44228-log4j agent plugin')),
        ],
    )


rulespec_registry.register(
    HostRulespec(
        group=RulespecGroupMonitoringAgentsAgentPlugins,
        name='agent_config:cve_2021_44228_log4j',
        valuespec=_valuespec_agent_config_cve_2021_44228_log4j,
    )
)
