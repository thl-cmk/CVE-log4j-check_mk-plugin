#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# License: GNU General Public License v2
#
# Author: thl-cmk[at]outlook[dot]com
# URL   : https://thl-cmk.hopto.org
# Date  : 2021-12-17
#
# Plugin for the CVE-2021-44228-log4j scanner from logpresso
# https://github.com/logpresso/CVE-2021-44228-Scanner
#
# 2021-12-20: made the plugin more stable on missing scanner output
# 2021-12-22: fixed unexpected value for check_levels
# 2021-12-27: added files_skipped and errors and lower levels to files/directories
#

# sample agent output
# <<<cve_2021_44228_log4j:sep(0);cached(1639746030,600)>>>
# Logpresso CVE-2021-44228 Vulnerability Scanner 2.0.0 (2021-12-17)
# Scanning directory: / (without /dev, /run, /dev/shm, /run/lock, /sys/fs/cgroup, /run/user/1003)
#
# Scanned 20865 directories and 209109 files
# Found 0 vulnerable files
# Found 0 potentially vulnerable files
# Found 0 mitigated files
# Completed in 3.30 seconds
#
#
# sample string_table
# [
#  ['Logpresso CVE-2021-44228 Vulnerability Scanner 2.0.0 (2021-12-17)'],
#  ['Scanning directory: / (without /dev, /run, /dev/shm, /run/lock, /sys/fs/cgroup, /run/user/1003'],
#  ['Scanned 20865 directories and 209109 files'],
#  ['Found 0 vulnerable files'],
#  ['Found 0 potentially vulnerable files'],
#  ['Found 0 mitigated files'],
#  ['Completed in 5.07 seconds']
# ]
#
#
from typing import Optional
from dataclasses import dataclass
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import (
    DiscoveryResult,
    StringTable,
    CheckResult,
)

from cmk.base.plugins.agent_based.agent_based_api.v1 import (
    register,
    Service,
    State,
    check_levels,
    render,
    Result,
)


@dataclass
class CVE_2021_44228_log4j:
    scanner: Optional[str]
    files_vulnerable: Optional[int]
    files_potential_vulnerable: Optional[int]
    files_mitigated: Optional[int]
    files_scanned: Optional[int]
    files_skipped: Optional[int]
    directories_scanned: Optional[int]
    run_time: Optional[float]
    errors: Optional[int]
    last_run: str
    scan_options: str
    script_verion: str
    details: str


def parse_cve_2021_44228_log4j(string_table: StringTable) -> CVE_2021_44228_log4j:
    details = ''
    last_run = string_table[0][0]

    vulnerable_files = []
    mitigated_files = []
    skipped_files = []
    error_lines = []

    scanner = 'N/A',
    files_vulnerable = None,
    files_potential_vulnerable = None,
    files_mitigated = None,
    files_scanned = None,
    directories_scanned = None,
    files_skipped = None
    errors = None
    run_time = 'N/A',
    scan_options = 'N/A'
    script_version = 'N/A'

    for line in string_table:
        line = str(line[0])
        details += f'\n{line}'

        if line.startswith('Logpresso CVE-2021-44228 Vulnerability Scanner'):
            scanner = line[47:]
        elif line.startswith('SCAN OPTIONS: '):
            scan_options = line[14:]  # cut 'SCAN OPTIONS: '
        elif line.startswith('SCRIPT VERSION: '):
            script_version = line[16:]  # cut 'SCRIPT VERSION: '
        elif line.startswith('[*]'):
            vulnerable_files.append(line)
        elif line.startswith('[?]'):
            mitigated_files.append(line)
        elif line.startswith('Scanned '):
            line = line.split(' ')
            directories_scanned = int(line[1])
            files_scanned = int(line[4])
        elif line.find(' potentially vulnerable files') != -1:
            line = line.split(' ')
            files_potential_vulnerable = int(line[1])
        elif line.find(' vulnerable files') != -1:
            line = line.split(' ')
            files_vulnerable = int(line[1])
        elif line.find(' mitigated files') != -1:
            line = line.split(' ')
            files_mitigated = int(line[1])
        elif line.startswith('Completed in '):
            line = line.split(' ')
            run_time = float(line[2])
        elif line.startswith('Skipping '):
            skipped_files.append(line)
        elif line.lower().startswith('error: '):
            error_lines.append(line)

    files_skipped = len(skipped_files)
    errors = len(error_lines)

    return CVE_2021_44228_log4j(
        scanner=scanner,
        files_vulnerable=files_vulnerable,
        files_potential_vulnerable=files_potential_vulnerable,
        files_mitigated=files_mitigated,
        files_scanned=files_scanned,
        files_skipped=files_skipped,
        directories_scanned=directories_scanned,
        run_time=run_time,
        errors=errors,
        last_run=last_run,
        scan_options=scan_options,
        script_verion=script_version,
        details=details,
    )


#
# sample section
# CVE_2021_44228_log4j(
#  files_vulnerable=0,
#  files_potential_vulnerable=0,
#  files_mitigated=0,
#  files_scanned=209109,
#  directories_scanned=20865,
#  run_time=5.07,
#  details='\nLogpresso CVE-2021-44228 Vulnerability Scanner 2.0.0 (2021-12-17)
#           \nScanning directory: / (without /dev, /run, /dev/shm, /run/lock, /sys/fs/cgroup, /run/user/1003)
#           \nScanned 20865 directories and 209109 files\n Found 0 vulnerable files
#           \nFound 0 potentially vulnerable files
#           \nFound 0 mitigated files
#           \nCompleted in 5.07 seconds')
#
#


def discovery_cve_2021_44228_log4j(section: CVE_2021_44228_log4j) -> DiscoveryResult:
    yield Service()


def check_cve_2021_44228_log4j(params, section: CVE_2021_44228_log4j) -> CheckResult:
    items_on_info = params['items_on_info']

    for label, value, metric in [
        ('Last run', section.last_run, 'last_run'),
        ('Scan options', section.scan_options, 'scan_options'),
        ('Scanner Version', section.scanner, 'scanner_version'),
        ('Script Version', section.script_verion, 'script_version'),
    ]:
        if metric in items_on_info:
            yield Result(state=State.OK, summary=f'{label}: {value}')
        else:
            yield Result(state=State.OK, notice=f'{label}: {value}')

    for value, levels_upper, levels_lower, label, metric, notice_only in [
        (section.files_vulnerable, params['files_vulnerable'], None, 'Files vulnerable', 'files_vulnerable', False),
        (section.files_potential_vulnerable, params['files_potential_vulnerable'], None, 'Files potentially vulnerable', 'files_potential_vulnerable', False),
        (section.files_mitigated, params['files_mitigated'], None, 'Files mitigated', 'files_mitigated', True),
        (section.files_skipped, params['files_skipped'], None, 'Files skipped', 'files_skipped', True),
        (section.files_scanned, params['files_scanned'].get('upper'), params['files_scanned'].get('lower'), 'Files scanned', 'files_scanned', True),
        (section.directories_scanned, params['directories_scanned'].get('upper'), params['directories_scanned'].get('lower'), 'Directories scanned', 'directories_scanned', True),
        (section.errors, params['errors'], None, 'Errors', 'errors', True),
    ]:
        if str(value).isdigit():
            yield from check_levels(
                value=value,
                metric_name=metric,
                render_func=lambda v: str(v),
                label=label,
                levels_upper=levels_upper,
                levels_lower=levels_lower,
                notice_only=False if metric in items_on_info else True,
            )

    if type(section.run_time) == float:
        yield from check_levels(
            value=section.run_time,
            metric_name='run_time',
            render_func=render.timespan,
            label='Run time',
            levels_upper=params['run_time'],
            notice_only=False if metric in items_on_info else True,
        )

    yield Result(state=State.OK, notice='\nRaw output of the script and the scanner:')
    yield Result(state=State.OK, notice=section.details)


register.agent_section(
    name="cve_2021_44228_log4j",
    parse_function=parse_cve_2021_44228_log4j,
)

register.check_plugin(
    name='cve_2021_44228_log4j',
    service_name='CVE-2021-44228-log4j',
    discovery_function=discovery_cve_2021_44228_log4j,
    check_function=check_cve_2021_44228_log4j,
    check_default_parameters={
        'files_vulnerable': (1, 1),
        'files_potential_vulnerable': (1, 1),
        'files_mitigated': (1, None),
        'files_scanned': {
            'lower': (None, None),
            'upper': (None, None),
        },
        'files_scanned_lower': (None, None),
        'files_skipped': (1, None),
        'errors': (None, 1),
        'directories_scanned': {
            'lower': (None, None),
            'upper': (None, None),
        },
        'directories_scanned_lower': (None, None),
        'run_time': (None, None),
        'items_on_info': [
            'files_vulnerable',
            'files_potential_vulnerable',
        ]
    },
    check_ruleset_name='cve_2021_44228_log4j'
)
