#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# License: GNU General Public License v2
#
# Author: thl-cmk[at]outlook[dot]com
# URL   : https://thl-cmk.hopto.org
# Date  : 2021-12-18
#
# bakery plugin for check_mk
#
# 2021-12-23: reworked options handling
# 2021-12-30: changed handling for search paths and excluded paths
# 2022-01-01: streamlined search path
# 2022-01-02: added options for syslog facility, rfc5424 syslog message format, append reporting to file
#             added option exclude files (bulk)
# 2022-01-04: added BAKERY_VERSION to the config file (for debugging)
#             added PLUGIN_TIMEOUT to the linux config  (fix scanner got not killed on timeout by the agent)
# 2022-01-05: added PLUGIN_TIMEOUT to the windows config (to match the linux variant)
#

from pathlib import Path
from typing import List

from cmk.base.cee.plugins.bakery.bakery_api.v1 import FileGenerator, OS, Plugin, PluginConfig, register


bakery_version = '20220105.v0.0.8'


def get_cve_2021_44228_log4j_files(conf: List[any]) -> FileGenerator:
    options = conf[1].copy()

    options_array: List = []
    search_path_array: List = []
    separator: str = ' '  # needs matching separator in the shell scripts

    include_paths = None
    exclude_paths = None
    exclude_files = None
    config_path = ''
    search_path = ''
    path_separator = ''
    interval = 86400
    timeout = 300

    if options.get('interval'):
        interval = options['interval']
        options.pop('interval')

    if options.get('timeout'):
        timeout = options['timeout']
        options.pop('timeout')

    if conf[0] == 'linux':
        config_path = '/etc/check_mk/'
        path_separator = '/'
    elif conf[0] == 'windows':
        config_path = 'C:\\ProgramData\\checkmk\\agent\\config\\'
        path_separator = '\\'

    if options['search_in'] == 'all_drives':
        options_array.append('--all-drives')
    elif 'drives_to_scan' in options['search_in']:
        label, drives_to_scan = options['search_in']
        drives_to_scan = f'--drives {",".join(drives_to_scan)}'
        options_array.append(drives_to_scan)
    elif 'search_paths' in options['search_in']:
        label, search_path = options['search_in']
        for path in search_path:
            path = path.strip(' ').strip("'").strip('"')
            search_path_array.append(f'"{path}"')
        search_path = separator.join(search_path)
    elif 'include_paths_file' in options['search_in']:
        label, include_paths = options['search_in']
        options_array.append(f'-f {config_path}cve_2021_44228_log4j_search.cfg')
    options.pop('search_in')

    if options.get('exclude_fs'):
        exclude_fs = ','.join(options['exclude_fs'])
        options_array.append(f'--exclude-fs {exclude_fs}')
        options.pop('exclude_fs')

    if options.get('syslog'):
        options_array.append(f'--syslog-level {options["syslog"].get("syslog_level", "info")}')
        syslog_server = f'--syslog-udp {options["syslog"]["syslog_server"]}'
        syslog_port = options['syslog'].get('syslog_port', None)
        if syslog_port is not None:
            syslog_port = f':{syslog_port}'
        else:
            syslog_port = ''
        options_array.append(f'{syslog_server}{syslog_port}')
        if options['syslog'].get('syslog_facility'):
            options_array.append(f'--syslog-facility {options["syslog"]["syslog_facility"]}')
        if options['syslog'].get('syslog_rfc5424'):
            options_array.append(f'--rfc5424')
        options.pop('syslog')

    if options.get('reporting'):
        report_dir = options['reporting']['report_dir'].strip(' ').strip("'").strip('"')
        if options['reporting'].get('log_path'):
            log_path = options['reporting']['log_path']
            if options['reporting'].get('report_format') == '--report-json':
                options_array.append(f'--json-log-path "{report_dir}{path_separator}{log_path}"')
            else:
                options_array.append(f'--csv-log-path "{report_dir}{path_separator}{log_path}"')
        else:
            options_array.append(f'--report-dir "{report_dir}"')
            options_array.append(options['reporting'].get('report_format', '--report-csv'))
        if options['reporting'].get('no_empty_report'):
            options_array.append('--no-empty-report')
        options.pop('reporting')

    if options.get('fix_files'):
        backup_dir = options["fix_files"]["backup_dir"].strip(' ').strip("'").strip('"')
        options_array.append(f'--backup-path "{backup_dir}"')
        if options['fix_files'].get('not_exclude_backup') is None:
            options_array.append(f'--exclude "{backup_dir}"')
        if options['fix_files'].get('force_fix'):
            options_array.append(f'--force-fix')
        options.pop('fix_files')

    if options.get('exclude_paths'):
        if 'exclude_paths' in options['exclude_paths']:
            label, paths = options['exclude_paths']
            for path in paths:
                path = path.strip(' ').strip("'").strip('"')
                options_array.append(f'--exclude "{path}"')
        elif 'exclude_paths_file' in options['exclude_paths']:
            label, exclude_paths = options['exclude_paths']
            options_array.append(f'--exclude-config {config_path}cve_2021_44228_log4j_exclude.cfg')
        options.pop('exclude_paths')

    if options.get('exclude_file_config'):
        exclude_files = options['exclude_file_config']
        options_array.append(f'--exclude-file-config {config_path}cve_2021_44228_log4j_exclude_files.cfg')
        options.pop('exclude_file_config')

    for value in options.values():
        options_array.append(value)

    options = separator.join(options_array)
    options = f'{options}{separator}{search_path}'

    if conf[0] == 'linux':
        yield Plugin(
            base_os=OS.LINUX,
            source=Path('cve_2021_44228_log4j.linux'),
            target=Path('cve_2021_44228_log4j.sh'),
            asynchronous=True,
            interval=interval,
            timeout=timeout,
        )
        yield Plugin(
            base_os=OS.LINUX,
            source=Path('log4j2-scan.linux'),
            target=Path('../bin/log4j2-scan'),
        )

        yield PluginConfig(
            base_os=OS.LINUX,
            lines=[
                f'BAKERY_VERSION={bakery_version}',
                f'OPTIONS=({options});',
                f'PLUGIN_TIMEOUT={timeout}',
            ],
            target=Path('cve_2021_44228_log4j.cfg'),
            include_header=True,
        )

        if include_paths:
            yield PluginConfig(
                base_os=OS.LINUX,
                lines=[include_paths],
                target=Path('cve_2021_44228_log4j_search.cfg'),
                include_header=False,
            )

        if exclude_paths:
            yield PluginConfig(
                base_os=OS.LINUX,
                lines=[exclude_paths],
                target=Path('cve_2021_44228_log4j_exclude.cfg'),
                include_header=False,
            )

        if exclude_files:
            yield PluginConfig(
                base_os=OS.LINUX,
                lines=[exclude_files],
                target=Path('cve_2021_44228_log4j_exclude_files.cfg'),
                include_header=False,
            )

    elif conf[0] == 'windows':
        yield Plugin(
            base_os=OS.WINDOWS,
            source=Path('cve_2021_44228_log4j.windows'),
            target=Path('cve_2021_44228_log4j.ps1'),
            asynchronous=True,
            interval=interval,
            timeout=timeout + 20,  # moved timeout handling to the ps script, keep this to be safe
        )
        yield Plugin(
            base_os=OS.WINDOWS,
            source=Path('log4j2-scan.windows'),
            target=Path('..\\bin\\log4j2-scan.exe'),
        )
        yield PluginConfig(
            base_os=OS.WINDOWS,
            lines=[
                f'BAKERY_VERSION={bakery_version}',
                f'OPTIONS={options}',
                f'PLUGIN_TIMEOUT={timeout}',
            ],
            target=Path('cve_2021_44228_log4j.cfg'),
            include_header=True,
        )

        if include_paths:
            yield PluginConfig(
                base_os=OS.WINDOWS,
                lines=[include_paths],
                target=Path('cve_2021_44228_log4j_search.cfg'),
                include_header=False,
            )

        if exclude_paths:
            yield PluginConfig(
                base_os=OS.WINDOWS,
                lines=[exclude_paths],
                target=Path('cve_2021_44228_log4j_exclude.cfg'),
                include_header=False,
            )

        if exclude_files:
            yield PluginConfig(
                base_os=OS.WINDOWS,
                lines=[exclude_files],
                target=Path('cve_2021_44228_log4j_exclude_files.cfg'),
                include_header=False,
            )


register.bakery_plugin(
    name='cve_2021_44228_log4j',
    files_function=get_cve_2021_44228_log4j_files,
)
